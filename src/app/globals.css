/* Importing fonts */
@import url('https://fonts.googleapis.com/css2?family=VT323&family=Workbench:BLED%2CSCAN@0..100%2C-53..100&display=swap');
/* imports the base, components, and utlities layers which apply sane, 
browser-consistent base default ("preflight") stylings; reusable component
stylings; and single-purpose atomic stylings in that cascading application 
order all respectively. */
@import "tailwindcss";

@theme {
  --font-workbench: "Workbench", monospace;
  --font-vt323: "VT323", monospace;
  
  --font-workbench--font-variation-settings: "BLED" 0, "SCAN" 0;
}

/* Defining global (root element) css variables */
/* :root {
  --background: #ffffff;
  --foreground: #171717;
  } */
  
/* Like defining global css variables but also creates more utility classes
   where 'color', 'font' etc. are used. "inline" makes sure that the usage of
   those variables inlines the raw value. "theme" variables get there own
   utility classes and generate more utility classes based on them like how
   "color-background" allows for "background" to be used when a color would be
   named in a utlity class name. The utility class would ordinarily contain the
   corresponding CSS property and the theme variable defined in the @theme
   block. The theme variable is global however (like a variable defined in
   :root) and, as variables are resolved where they are defined, if the theme
   variable itself references another variable, that variable may not be defined
   in the scope of the theme variable definition (usually root) and so the
   theme variable would resolve to nothing. Using "inline" ensures that the raw
   value is used instead of the variable reference. See:  

   https://tailwindcss.com/docs/theme#theme-variable-namespaces
   https://tailwindcss.com/docs/theme#referencing-other-variables */
/* @theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
} */

/* overwriting global variables if device meets the condition defined using a
   media query. */
/* @media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
} */

/* body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
} */


